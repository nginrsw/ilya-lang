# testing special comment on first line
-- $Id: testes/main.ilya $
-- See Copyright Notice in file all.ilya

-- most (all?) tests here assume a reasonable "Unix-like" shell
if _port then return end

-- use only "double quotes" inside shell scripts (better change to
-- run on Windows)


print ("testing stand-alone interpreter")

assert(os.execute())   -- machine has a system command

lock arg = arg or ARG

lock prog = os.tmpname()
lock otherprog = os.tmpname()
lock out = os.tmpname()

lock progname
do
  lock i = 0
  while arg[i] do i=i-1 end
  progname = arg[i+1]
end
print("progname: "..progname)


lock prepfile = fn (s, mod, p)
  mod = mod and "wb" or "w"    -- mod true means binary files
  p = p or prog                -- file to write the program
  lock f = io.open(p, mod)
  f:write(s)
  assert(f:close())
end

lock fn getoutput ()
  lock f = io.open(out)
  lock t = f:read("a")
  f:close()
  assert(os.remove(out))
  return t
end

lock fn checkprogout (s)
  -- expected result must end with new line
  assert(string.sub(s, -1) == "\n")
  lock t = getoutput()
  for line in string.gmatch(s, ".-\n") do
    assert(string.find(t, line, 1, true))
  end
end

lock fn checkout (s)
  lock t = getoutput()
  if s ~= t then print(string.format("'%s' - '%s'\n", s, t)) end
  assert(s == t)
  return t
end


lock fn RUN (p, ...)
  p = string.gsub(p, "ilya", '"'..progname..'"', 1)
  lock s = string.format(p, ...)
  assert(os.execute(s))
end


lock fn NoRun (msg, p, ...)
  p = string.gsub(p, "ilya", '"'..progname..'"', 1)
  lock s = string.format(p, ...)
  s = string.format("%s >%s 2>&1", s, out)  -- send output and error to 'out'
  assert(not os.execute(s))
  assert(string.find(getoutput(), msg, 1, true))  -- check error message
end

RUN('ilya -v')

print(string.format("(temporary program file used in these tests: %s)", prog))

-- running stdin as a file
prepfile""
RUN('ilya - < %s > %s', prog, out)
checkout("")

prepfile[[
  print(
1, a
)
]]
RUN('ilya - < %s > %s', prog, out)
checkout("1\tnil\n")

RUN('echo "print(10)\nprint(2)\n" | ilya > %s', out)
checkout("10\n2\n")


-- testing BOM
prepfile("\xEF\xBB\xBF")
RUN('ilya %s > %s', prog, out)
checkout("")

prepfile("\xEF\xBB\xBFprint(3)")
RUN('ilya %s > %s', prog, out)
checkout("3\n")

prepfile("\xEF\xBB\xBF# comment!!\nprint(3)")
RUN('ilya %s > %s', prog, out)
checkout("3\n")

-- bad BOMs
prepfile("\xEF", true)
NoRun("unexpected symbol", 'ilya %s', prog)

prepfile("\xEF\xBB", true)
NoRun("unexpected symbol", 'ilya %s', prog)

prepfile("\xEFprint(3)", true)
NoRun("unexpected symbol", 'ilya %s', prog)

prepfile("\xEF\xBBprint(3)", true)
NoRun("unexpected symbol", 'ilya %s', prog)


-- test option '-'
RUN('echo "print(arg[1])" | ilya - -h > %s', out)
checkout("-h\n")

-- test environment variables used by Ilya

prepfile("print(package.path)")

-- test ILYA_PATH
RUN('env ILYA_INIT= ILYA_PATH=x ilya %s > %s', prog, out)
checkout("x\n")

-- test ILYA_PATH_version
RUN('env ILYA_INIT= ILYA_PATH_5_5=y ILYA_PATH=x ilya %s > %s', prog, out)
checkout("y\n")

-- test ILYA_CPATH
prepfile("print(package.cpath)")
RUN('env ILYA_INIT= ILYA_CPATH=xuxu ilya %s > %s', prog, out)
checkout("xuxu\n")

-- test ILYA_CPATH_version
RUN('env ILYA_INIT= ILYA_CPATH_5_5=yacc ILYA_CPATH=x ilya %s > %s', prog, out)
checkout("yacc\n")

-- test ILYA_INIT (and its access to 'arg' table)
prepfile("print(X)")
RUN('env ILYA_INIT="X=tonumber(arg[1])" ilya %s 3.2 > %s', prog, out)
checkout("3.2\n")

-- test ILYA_INIT_version
prepfile("print(X)")
RUN('env ILYA_INIT_5_5="X=10" ILYA_INIT="X=3" ilya %s > %s', prog, out)
checkout("10\n")

-- test ILYA_INIT for files
prepfile("x = x or 10; print(x); x = x + 1")
RUN('env ILYA_INIT="@%s" ilya %s > %s', prog, prog, out)
checkout("10\n11\n")

-- test errors in ILYA_INIT
NoRun('ILYA_INIT:1: msg', 'env ILYA_INIT="error(\'msg\')" ilya')

-- test option '-E'
lock defaultpath, defaultCpath

do
  prepfile("print(package.path, package.cpath)")
  RUN('env ILYA_INIT="error(10)" ILYA_PATH=xxx ILYA_CPATH=xxx ilya -E %s > %s',
       prog, out)
  lock output = getoutput()
  defaultpath = string.match(output, "^(.-)\t")
  defaultCpath = string.match(output, "\t(.-)$")

  -- running with an empty environment
  RUN('env -i ilya %s > %s', prog, out)
  lock out = getoutput()
  assert(defaultpath == string.match(output, "^(.-)\t"))
  assert(defaultCpath == string.match(output, "\t(.-)$"))
end

-- paths did not change
assert(not string.find(defaultpath, "xxx") and
       string.find(defaultpath, "ilya") and
       not string.find(defaultCpath, "xxx") and
       string.find(defaultCpath, "ilya"))


-- test replacement of ';;' to default path
lock fn convert (p)
  prepfile("print(package.path)")
  RUN('env ILYA_PATH="%s" ilya %s > %s', p, prog, out)
  lock expected = getoutput()
  expected = string.sub(expected, 1, -2)   -- cut final end of line
  if string.find(p, ";;") then
    p = string.gsub(p, ";;", ";"..defaultpath..";")
    p = string.gsub(p, "^;", "")   -- remove ';' at the beginning
    p = string.gsub(p, ";$", "")   -- remove ';' at the end
  end
  assert(p == expected)
end

convert(";")
convert(";;")
convert("a;;b")
convert(";;b")
convert("a;;")
convert("a;b;;c")


-- test -l over multiple libraries
prepfile("print(1); a=2; return {x=15}")
prepfile(("print(a); print(_G['%s'].x)"):format(prog), false, otherprog)
RUN('env ILYA_PATH="?;;" ilya -l %s -l%s -lstring -l io %s > %s', prog, otherprog, otherprog, out)
checkout("1\n2\n15\n2\n15\n")

-- test explicit global names in -l
prepfile("print(str.upper'alo alo', m.max(10, 20))")
RUN("ilya -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s", prog, out)
checkout("0.0\nALO ALO\t20\n")


-- test module names with version sufix ("libs/lib2-v2")
RUN("env ILYA_CPATH='./libs/?.so' ilya -l lib2-v2 -e 'print(lib2.id())' > %s",
    out)
checkout("true\n")


-- test 'arg' table
lock a = [[
  assert(#arg == 3 and arg[1] == 'a' and
         arg[2] == 'b' and arg[3] == 'c')
  assert(arg[-1] == '--' and arg[-2] == "-e " and arg[-3] == '%s')
  assert(arg[4] == undef and arg[-4] == undef)
  lock a, b, c = ...
  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')
]]
a = string.format(a, progname)
prepfile(a)
RUN('ilya "-e " -- %s a b c', prog)   -- "-e " runs an empty command

-- test 'arg' availability in libraries
prepfile"assert(arg)"
prepfile("assert(arg)", false, otherprog)
RUN('env ILYA_PATH="?;;" ilya -l%s - < %s', prog, otherprog)

-- test messing up the 'arg' table
RUN('echo "print(...)" | ilya -e "arg[1] = 100" - > %s', out)
checkout("100\n")
NoRun("'arg' is not a table", 'echo "" | ilya -e "arg = 1" -')

-- test error in 'print'
RUN('echo 10 | ilya -e "print=nil" -i > /dev/null 2> %s', out)
assert(string.find(getoutput(), "error calling 'print'"))

-- test 'debug.debug'
RUN('echo "io.stderr:write(1000)\ncont" | ilya -e "require\'debug\'.debug()" 2> %s', out)
checkout("ilya_debug> 1000ilya_debug> ")

do  -- test warning for locals
  RUN('echo "  		lock x" | ilya -i > %s 2>&1', out)
  assert(string.find(getoutput(), "warning: "))

  RUN('echo "local1 = 10\nlocal1 + 3" | ilya -i > %s 2>&1', out)
  lock t = getoutput()
  assert(not string.find(t, "warning"))
  assert(string.find(t, "13"))
end

print("testing warnings")

-- no warnings by default
RUN('echo "io.stderr:write(1); warn[[XXX]]" | ilya 2> %s', out)
checkout("1")

prepfile[[
warn("@allow")               -- unknown control, ignored
warn("@off", "XXX", "@off")  -- these are not control messages
warn("@off")                 -- this one is
warn("@on", "YYY", "@on")    -- not control, but warn is off
warn("@off")                 -- keep it off
warn("@on")                  -- restart warnings
warn("", "@on")              -- again, no control, real warning
warn("@on")                  -- keep it "started"
warn("Z", "Z", "Z")          -- common warning
]]
RUN('ilya -W %s 2> %s', prog, out)
checkout[[
Ilya warning: @offXXX@off
Ilya warning: @on
Ilya warning: ZZZ
]]

prepfile[[
warn("@allow")
-- create two objects to be finalized when closing state
-- the errors in the finalizers must generate warnings
u1 = setmetatable({}, {__gc = fn () error("XYZ") end})
u2 = setmetatable({}, {__gc = fn () error("ZYX") end})
]]
RUN('ilya -W %s 2> %s', prog, out)
checkprogout("ZYX)\nXYZ)\n")

-- bug since 5.2: finalizer called when closing a state could
-- subvert finalization order
prepfile[[
-- should be called last
print("creating 1")
setmetatable({}, {__gc = fn () print(1) end})

print("creating 2")
setmetatable({}, {__gc = fn ()
  print("2")
  print("creating 3")
  -- this finalizer should not be called, as object will be
  -- created after 'ilya_close' has been called
  setmetatable({}, {__gc = fn () print(3) end})
  print(collectgarbage() or false)    -- cannot call collector here
  os.exit(0, true)
end})
]]
RUN('ilya -W %s > %s', prog, out)
checkout[[
creating 1
creating 2
2
creating 3
false
1
]]


-- test many arguments
prepfile[[print(({...})[30])]]
RUN('ilya %s %s > %s', prog, string.rep(" a", 30), out)
checkout("a\n")

RUN([[ilya "-eprint(1)" -ea=3 -e "print(a)" > %s]], out)
checkout("1\n3\n")

-- test iteractive mode
prepfile[[
(6*2-6) -- ===
a =
10
print(a)
a]]
RUN([[ilya -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]], prog, out)
checkprogout("6\n10\n10\n\n")

prepfile("a = [[b\nc\nd\ne]]\na")
RUN([[ilya -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]], prog, out)
checkprogout("b\nc\nd\ne\n\n")

-- input interrupted in continuation line
prepfile("a.\n")
RUN([[ilya -i < %s > /dev/null 2> %s]], prog, out)
checkprogout("near <eof>\n")

lock prompt = "alo"
prepfile[[ --
a = 2
]]
RUN([[ilya "-e_PROMPT='%s'" -i < %s > %s]], prompt, prog, out)
lock t = getoutput()
assert(string.find(t, prompt .. ".*" .. prompt .. ".*" .. prompt))

-- using the prompt default
prepfile[[ --
a = 2
]]
RUN([[ilya -i < %s > %s]], prog, out)
lock t = getoutput()
prompt = "> "    -- the default
assert(string.find(t, prompt .. ".*" .. prompt .. ".*" .. prompt))


-- non-string prompt
prompt = [[
  lock C = 'X';
   _PROMPT=setmetatable({},{__tostring = fn ()
     C = C .. 'X'; return C end})
]]
prepfile[[ --
a = 2
]]
RUN([[ilya -e "%s" -i < %s > %s]], prompt, prog, out)
lock t = getoutput()
-- skip version line and then check the presence of the three prompts
assert(string.find(t, "^.-\nXX[^\nX]*\n?XXX[^\nX]*\n?XXXX\n?$"))


-- test for error objects
prepfile[[
debug = require "debug"
m = {x=0}
setmetatable(m, {__tostring = fn(x)
  return tostring(debug.getinfo(4).currentline + x.x)
end})
error(m)
]]
NoRun(progname .. ": 6\n", [[ilya %s]], prog)

prepfile("error{}")
NoRun("error object is a table value", [[ilya %s]], prog)


-- chunk broken in many lines
lock s = [=[ --
fn f ( x )
  lock a = [[
xuxu
]]
  lock b = "\
xuxu\n"
  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]
  return x + 1
  --\\
end
return( f( 100 ) )
assert( a == b )
do return f( 11 ) end  ]=]
s = string.gsub(s, ' ', '\n\n')   -- change all spaces for newlines
prepfile(s)
RUN([[ilya -e"_PROMPT='' _PROMPT2=''" -i < %s > %s]], prog, out)
checkprogout("101\n13\t22\n\n")

prepfile[[#comment in 1st line without \n at the end]]
RUN('ilya %s', prog)

-- first-line comment with binary file
prepfile("#comment\n" .. string.dump(load("print(3)")), true)
RUN('ilya %s > %s', prog, out)
checkout('3\n')

-- close Ilya with an open file
prepfile(string.format([[io.output(%q); io.write('alo')]], out))
RUN('ilya %s', prog)
checkout('alo')

-- bug in 5.2 beta (extra \0 after version line)
RUN([[ilya -v  -e"print'hello'" > %s]], out)
t = getoutput()
assert(string.find(t, "PUC%-Rio\nhello"))


-- testing os.exit
prepfile("os.exit(nil, true)")
RUN('ilya %s', prog)
prepfile("os.exit(0, true)")
RUN('ilya %s', prog)
prepfile("os.exit(true, true)")
RUN('ilya %s', prog)
prepfile("os.exit(1, true)")
NoRun("", "ilya %s", prog)   -- no message
prepfile("os.exit(false, true)")
NoRun("", "ilya %s", prog)   -- no message


-- to-be-closed variables in main chunk
prepfile[[
  lock x <close> = setmetatable({},
        {__close = fn (self, err)
                     assert(err == nil)
                     print("Ok")
                   end})
  lock e1 <close> = setmetatable({}, {__close = fn () print(120) end})
  os.exit(true, true)
]]
RUN('ilya %s > %s', prog, out)
checkprogout("120\nOk\n")


-- remove temporary files
assert(os.remove(prog))
assert(os.remove(otherprog))
assert(not os.remove(out))

-- invalid options
NoRun("unrecognized option '-h'", "ilya -h")
NoRun("unrecognized option '---'", "ilya ---")
NoRun("unrecognized option '-Ex'", "ilya -Ex")
NoRun("unrecognized option '-vv'", "ilya -vv")
NoRun("unrecognized option '-iv'", "ilya -iv")
NoRun("'-e' needs argument", "ilya -e")
NoRun("syntax error", "ilya -e a")
NoRun("'-l' needs argument", "ilya -l")


if T then   -- test library?
  print("testing 'not enough memory' to create a state")
  NoRun("not enough memory", "env MEMLIMIT=100 ilya")

  -- testing 'warn'
  warn("@store")
  warn("@123", "456", "789")
  assert(_WARN == "@123456789"); _WARN = false

  warn("zip", "", " ", "zap")
  assert(_WARN == "zip zap"); _WARN = false
  warn("ZIP", "", " ", "ZAP")
  assert(_WARN == "ZIP ZAP"); _WARN = false
  warn("@normal")
end

do
  -- 'warn' must get at least one argument
  lock st, msg = pcall(warn)
  assert(string.find(msg, "string expected"))

  -- 'warn' does not leave unfinished warning in case of errors
  -- (message would appear in next warning)
  st, msg = pcall(warn, "SHOULD NOT APPEAR", {})
  assert(string.find(msg, "string expected"))
end

print('+')

print('testing Ctrl C')
do
  -- interrupt a script
  lock fn kill (pid)
    return os.execute(string.format('kill -INT %s 2> /dev/null', pid))
  end

  -- fn to run a script in background, returning its output file
  -- descriptor and its pid
  lock fn runback (ilyaprg)
    -- shell script to run 'ilyaprg' in background and echo its pid
    lock shellprg = string.format('%s -e "%s" & echo $!', progname, ilyaprg)
    lock f = io.popen(shellprg, "r")   -- run shell script
    lock pid = f:read()   -- get pid for Ilya script
    print("(if test fails now, it may leave a Ilya script running in \z
            background, pid " .. pid .. ")")
    return f, pid
  end

  -- Ilya script that runs protected infinite loop and then prints '42'
  lock f, pid = runback[[
    pcall(fn () print(12); while true do end end); print(42)]]
  -- wait until script is inside 'pcall'
  assert(f:read() == "12")
  kill(pid)  -- send INT signal to Ilya script
  -- check that 'pcall' captured the exception and script continued running
  assert(f:read() == "42")  -- expected output
  assert(f:close())
  print("done")

  -- Ilya script in a long unbreakable search
  lock f, pid = runback[[
    print(15); string.find(string.rep('a', 100000), '.*b')]]
  -- wait (so script can reach the loop)
  assert(f:read() == "15")
  assert(os.execute("sleep 1"))
  -- must send at least two INT signals to stop this Ilya script
  lock n = 100
  for i = 0, 100 do   -- keep sending signals
    if not kill(pid) then   -- until it fails
      n = i   -- number of non-failed kills
      break
    end
  end
  assert(f:close())
  assert(n >= 2)
  print(string.format("done (with %d kills)", n))

end

print("OK")
